// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xmsg_comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xmsg_5fcomm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xmsg_5fcomm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xmsg_type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xmsg_5fcomm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xmsg_5fcomm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xmsg_5fcomm_2eproto;
namespace xmsg {
class XLoginReq;
struct XLoginReqDefaultTypeInternal;
extern XLoginReqDefaultTypeInternal _XLoginReq_default_instance_;
class XLoginRes;
struct XLoginResDefaultTypeInternal;
extern XLoginResDefaultTypeInternal _XLoginRes_default_instance_;
class XMsgHead;
struct XMsgHeadDefaultTypeInternal;
extern XMsgHeadDefaultTypeInternal _XMsgHead_default_instance_;
}  // namespace xmsg
PROTOBUF_NAMESPACE_OPEN
template<> ::xmsg::XLoginReq* Arena::CreateMaybeMessage<::xmsg::XLoginReq>(Arena*);
template<> ::xmsg::XLoginRes* Arena::CreateMaybeMessage<::xmsg::XLoginRes>(Arena*);
template<> ::xmsg::XMsgHead* Arena::CreateMaybeMessage<::xmsg::XMsgHead>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xmsg {

enum XLoginRes_XLoginResType : int {
  XLoginRes_XLoginResType_OK = 0,
  XLoginRes_XLoginResType_ERROR = 1,
  XLoginRes_XLoginResType_NOUSER = 2,
  XLoginRes_XLoginResType_XLoginRes_XLoginResType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  XLoginRes_XLoginResType_XLoginRes_XLoginResType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool XLoginRes_XLoginResType_IsValid(int value);
constexpr XLoginRes_XLoginResType XLoginRes_XLoginResType_XLoginResType_MIN = XLoginRes_XLoginResType_OK;
constexpr XLoginRes_XLoginResType XLoginRes_XLoginResType_XLoginResType_MAX = XLoginRes_XLoginResType_NOUSER;
constexpr int XLoginRes_XLoginResType_XLoginResType_ARRAYSIZE = XLoginRes_XLoginResType_XLoginResType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* XLoginRes_XLoginResType_descriptor();
template<typename T>
inline const std::string& XLoginRes_XLoginResType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, XLoginRes_XLoginResType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function XLoginRes_XLoginResType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    XLoginRes_XLoginResType_descriptor(), enum_t_value);
}
inline bool XLoginRes_XLoginResType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, XLoginRes_XLoginResType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<XLoginRes_XLoginResType>(
    XLoginRes_XLoginResType_descriptor(), name, value);
}
// ===================================================================

class XMsgHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xmsg.XMsgHead) */ {
 public:
  inline XMsgHead() : XMsgHead(nullptr) {}
  ~XMsgHead() override;
  explicit constexpr XMsgHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XMsgHead(const XMsgHead& from);
  XMsgHead(XMsgHead&& from) noexcept
    : XMsgHead() {
    *this = ::std::move(from);
  }

  inline XMsgHead& operator=(const XMsgHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline XMsgHead& operator=(XMsgHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XMsgHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const XMsgHead* internal_default_instance() {
    return reinterpret_cast<const XMsgHead*>(
               &_XMsgHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XMsgHead& a, XMsgHead& b) {
    a.Swap(&b);
  }
  inline void Swap(XMsgHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XMsgHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XMsgHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XMsgHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XMsgHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XMsgHead& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XMsgHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xmsg.XMsgHead";
  }
  protected:
  explicit XMsgHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kServiceNameFieldNumber = 4,
    kMsgSizeFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string service_name = 4;
  void clear_service_name();
  const std::string& service_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service_name();
  PROTOBUF_NODISCARD std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // int32 msg_size = 1;
  void clear_msg_size();
  int32_t msg_size() const;
  void set_msg_size(int32_t value);
  private:
  int32_t _internal_msg_size() const;
  void _internal_set_msg_size(int32_t value);
  public:

  // .xmsg.MsgType msg_type = 2;
  void clear_msg_type();
  ::xmsg::MsgType msg_type() const;
  void set_msg_type(::xmsg::MsgType value);
  private:
  ::xmsg::MsgType _internal_msg_type() const;
  void _internal_set_msg_type(::xmsg::MsgType value);
  public:

  // @@protoc_insertion_point(class_scope:xmsg.XMsgHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  int32_t msg_size_;
  int msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xmsg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class XLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xmsg.XLoginReq) */ {
 public:
  inline XLoginReq() : XLoginReq(nullptr) {}
  ~XLoginReq() override;
  explicit constexpr XLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XLoginReq(const XLoginReq& from);
  XLoginReq(XLoginReq&& from) noexcept
    : XLoginReq() {
    *this = ::std::move(from);
  }

  inline XLoginReq& operator=(const XLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline XLoginReq& operator=(XLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const XLoginReq* internal_default_instance() {
    return reinterpret_cast<const XLoginReq*>(
               &_XLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(XLoginReq& a, XLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(XLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XLoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XLoginReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xmsg.XLoginReq";
  }
  protected:
  explicit XLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:xmsg.XLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xmsg_5fcomm_2eproto;
};
// -------------------------------------------------------------------

class XLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xmsg.XLoginRes) */ {
 public:
  inline XLoginRes() : XLoginRes(nullptr) {}
  ~XLoginRes() override;
  explicit constexpr XLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XLoginRes(const XLoginRes& from);
  XLoginRes(XLoginRes&& from) noexcept
    : XLoginRes() {
    *this = ::std::move(from);
  }

  inline XLoginRes& operator=(const XLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline XLoginRes& operator=(XLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const XLoginRes* internal_default_instance() {
    return reinterpret_cast<const XLoginRes*>(
               &_XLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(XLoginRes& a, XLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(XLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XLoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XLoginRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XLoginRes& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XLoginRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xmsg.XLoginRes";
  }
  protected:
  explicit XLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef XLoginRes_XLoginResType XLoginResType;
  static constexpr XLoginResType OK =
    XLoginRes_XLoginResType_OK;
  static constexpr XLoginResType ERROR =
    XLoginRes_XLoginResType_ERROR;
  static constexpr XLoginResType NOUSER =
    XLoginRes_XLoginResType_NOUSER;
  static inline bool XLoginResType_IsValid(int value) {
    return XLoginRes_XLoginResType_IsValid(value);
  }
  static constexpr XLoginResType XLoginResType_MIN =
    XLoginRes_XLoginResType_XLoginResType_MIN;
  static constexpr XLoginResType XLoginResType_MAX =
    XLoginRes_XLoginResType_XLoginResType_MAX;
  static constexpr int XLoginResType_ARRAYSIZE =
    XLoginRes_XLoginResType_XLoginResType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  XLoginResType_descriptor() {
    return XLoginRes_XLoginResType_descriptor();
  }
  template<typename T>
  static inline const std::string& XLoginResType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, XLoginResType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function XLoginResType_Name.");
    return XLoginRes_XLoginResType_Name(enum_t_value);
  }
  static inline bool XLoginResType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      XLoginResType* value) {
    return XLoginRes_XLoginResType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kResFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .xmsg.XLoginRes.XLoginResType res = 1;
  void clear_res();
  ::xmsg::XLoginRes_XLoginResType res() const;
  void set_res(::xmsg::XLoginRes_XLoginResType value);
  private:
  ::xmsg::XLoginRes_XLoginResType _internal_res() const;
  void _internal_set_res(::xmsg::XLoginRes_XLoginResType value);
  public:

  // @@protoc_insertion_point(class_scope:xmsg.XLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int res_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xmsg_5fcomm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XMsgHead

// int32 msg_size = 1;
inline void XMsgHead::clear_msg_size() {
  msg_size_ = 0;
}
inline int32_t XMsgHead::_internal_msg_size() const {
  return msg_size_;
}
inline int32_t XMsgHead::msg_size() const {
  // @@protoc_insertion_point(field_get:xmsg.XMsgHead.msg_size)
  return _internal_msg_size();
}
inline void XMsgHead::_internal_set_msg_size(int32_t value) {
  
  msg_size_ = value;
}
inline void XMsgHead::set_msg_size(int32_t value) {
  _internal_set_msg_size(value);
  // @@protoc_insertion_point(field_set:xmsg.XMsgHead.msg_size)
}

// .xmsg.MsgType msg_type = 2;
inline void XMsgHead::clear_msg_type() {
  msg_type_ = 0;
}
inline ::xmsg::MsgType XMsgHead::_internal_msg_type() const {
  return static_cast< ::xmsg::MsgType >(msg_type_);
}
inline ::xmsg::MsgType XMsgHead::msg_type() const {
  // @@protoc_insertion_point(field_get:xmsg.XMsgHead.msg_type)
  return _internal_msg_type();
}
inline void XMsgHead::_internal_set_msg_type(::xmsg::MsgType value) {
  
  msg_type_ = value;
}
inline void XMsgHead::set_msg_type(::xmsg::MsgType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:xmsg.XMsgHead.msg_type)
}

// string token = 3;
inline void XMsgHead::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& XMsgHead::token() const {
  // @@protoc_insertion_point(field_get:xmsg.XMsgHead.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XMsgHead::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xmsg.XMsgHead.token)
}
inline std::string* XMsgHead::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:xmsg.XMsgHead.token)
  return _s;
}
inline const std::string& XMsgHead::_internal_token() const {
  return token_.Get();
}
inline void XMsgHead::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* XMsgHead::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* XMsgHead::release_token() {
  // @@protoc_insertion_point(field_release:xmsg.XMsgHead.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void XMsgHead::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xmsg.XMsgHead.token)
}

// string service_name = 4;
inline void XMsgHead::clear_service_name() {
  service_name_.ClearToEmpty();
}
inline const std::string& XMsgHead::service_name() const {
  // @@protoc_insertion_point(field_get:xmsg.XMsgHead.service_name)
  return _internal_service_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XMsgHead::set_service_name(ArgT0&& arg0, ArgT... args) {
 
 service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xmsg.XMsgHead.service_name)
}
inline std::string* XMsgHead::mutable_service_name() {
  std::string* _s = _internal_mutable_service_name();
  // @@protoc_insertion_point(field_mutable:xmsg.XMsgHead.service_name)
  return _s;
}
inline const std::string& XMsgHead::_internal_service_name() const {
  return service_name_.Get();
}
inline void XMsgHead::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* XMsgHead::_internal_mutable_service_name() {
  
  return service_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* XMsgHead::release_service_name() {
  // @@protoc_insertion_point(field_release:xmsg.XMsgHead.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void XMsgHead::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (service_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xmsg.XMsgHead.service_name)
}

// -------------------------------------------------------------------

// XLoginReq

// string username = 1;
inline void XLoginReq::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& XLoginReq::username() const {
  // @@protoc_insertion_point(field_get:xmsg.XLoginReq.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XLoginReq::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xmsg.XLoginReq.username)
}
inline std::string* XLoginReq::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:xmsg.XLoginReq.username)
  return _s;
}
inline const std::string& XLoginReq::_internal_username() const {
  return username_.Get();
}
inline void XLoginReq::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* XLoginReq::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* XLoginReq::release_username() {
  // @@protoc_insertion_point(field_release:xmsg.XLoginReq.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void XLoginReq::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (username_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xmsg.XLoginReq.username)
}

// string password = 2;
inline void XLoginReq::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& XLoginReq::password() const {
  // @@protoc_insertion_point(field_get:xmsg.XLoginReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XLoginReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xmsg.XLoginReq.password)
}
inline std::string* XLoginReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:xmsg.XLoginReq.password)
  return _s;
}
inline const std::string& XLoginReq::_internal_password() const {
  return password_.Get();
}
inline void XLoginReq::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* XLoginReq::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* XLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:xmsg.XLoginReq.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void XLoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xmsg.XLoginReq.password)
}

// -------------------------------------------------------------------

// XLoginRes

// .xmsg.XLoginRes.XLoginResType res = 1;
inline void XLoginRes::clear_res() {
  res_ = 0;
}
inline ::xmsg::XLoginRes_XLoginResType XLoginRes::_internal_res() const {
  return static_cast< ::xmsg::XLoginRes_XLoginResType >(res_);
}
inline ::xmsg::XLoginRes_XLoginResType XLoginRes::res() const {
  // @@protoc_insertion_point(field_get:xmsg.XLoginRes.res)
  return _internal_res();
}
inline void XLoginRes::_internal_set_res(::xmsg::XLoginRes_XLoginResType value) {
  
  res_ = value;
}
inline void XLoginRes::set_res(::xmsg::XLoginRes_XLoginResType value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:xmsg.XLoginRes.res)
}

// string token = 2;
inline void XLoginRes::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& XLoginRes::token() const {
  // @@protoc_insertion_point(field_get:xmsg.XLoginRes.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void XLoginRes::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xmsg.XLoginRes.token)
}
inline std::string* XLoginRes::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:xmsg.XLoginRes.token)
  return _s;
}
inline const std::string& XLoginRes::_internal_token() const {
  return token_.Get();
}
inline void XLoginRes::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* XLoginRes::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* XLoginRes::release_token() {
  // @@protoc_insertion_point(field_release:xmsg.XLoginRes.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void XLoginRes::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xmsg.XLoginRes.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xmsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xmsg::XLoginRes_XLoginResType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xmsg::XLoginRes_XLoginResType>() {
  return ::xmsg::XLoginRes_XLoginResType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xmsg_5fcomm_2eproto
